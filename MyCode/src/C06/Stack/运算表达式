前缀 运算符号在前      - X + 3 4 5 6        波兰计算器
    从右向左扫描
    1.遇到数字压入数字栈中
    2.遇到运算符遇到运算符弹出栈顶两个元素做相应计算，将结果入栈
    3.重复上述过程直到扫描至表达式最右端
中缀 常见表达式       (3 + 4) X 5 - 6
后缀 运算表达式在后    3 4 + 5 X 6 -         逆波兰计算器
    从左向右扫面
    1.遇到数字时将数字压入栈
    2.遇到运算符弹出栈顶两个元素做相应计算，将结果入栈
    3.重复上述过程直到扫描至表达式最右端
中缀表达式转前缀表达式和后缀表达式
    (1) 初始化两个栈：运算符栈S1和储存中间结果的栈S2；
    (2) 从右至左扫描中缀表达式；
    (3) 遇到操作数时，将其压入S2；
    (4) 遇到运算符时，比较其与S1栈顶运算符的优先级：
        (4-1) 如果S1为空，或栈顶运算符为右括号“)”，则直接将此运算符入栈；
        (4-2) 否则，若优先级比栈顶运算符的 [较高 或 相等]  ，也将运算符压入S1；
        (4-3) 否则，将S1栈顶的运算符弹出并压入到S2中，再次转到(4-1)与S1中新的栈顶运算符相比较；
    (5) 遇到括号时：                可以想象成“)”比任何运算符都高，“(”比任何运算符都低 。
        (5-1) 如果是右括号“)”，则直接压入S1；
        (5-2) 如果是左括号“(”，则依次弹出S1栈顶的运算符，并压入S2，直到遇到右括号为止，此时将这一对括号丢弃；
    (6) 重复步骤(2)至(5)，直到表达式的最左边；
    (7) 将S1中剩余的运算符依次弹出并压入S2；
    (8) 依次弹出S2中的元素并输出，结果即为中缀表达式对应的前缀表达式。
中缀表达式转后缀表达式
    (1) 初始化两个栈：运算符栈S1和储存中间结果的栈S2；
    (2) 从左至右扫描中缀表达式；
    (3) 遇到操作数时，将其压入S2；
    (4) 遇到运算符时，比较其与S1栈顶运算符的优先级：
        (4-1) 如果S1为空，或栈顶运算符为左括号“(”，则直接将此运算符入栈；
        (4-2) 否则，若优先级比栈顶运算符的 [高]  ，也将运算符压入S1                 //注意转换为前缀表达式时是优先级较高或相同，而这里则不包括相同的情况
        (4-3) 比栈顶 [ 低 或 相同 ]，将S1栈顶的运算符弹出并压入到S2中，再次转到(4-1)与S1中新的栈顶运算符相比较；
    (5) 遇到括号时：                  可以想象成“(”比任何运算符都高，“)”比任何运算符都低 。
        (5-1) 如果是左括号“(”，则直接压入S1；
        (5-2) 如果是右括号“)”，则依次弹出S1栈顶的运算符，并压入S2，直到遇到左括号为止，此时将这一对括号丢弃；
    (6) 重复步骤(2)至(5)，直到表达式的最右边；
    (7) 将S1中剩余的运算符依次弹出并压入S2；
    (8) 依次弹出S2中的元素并输出，结果的逆序即为中缀表达式对应的后缀表达式（转换为前缀表达式时不用逆序）。
参考链接：https://www.cnblogs.com/tech-bird/p/3971555.html